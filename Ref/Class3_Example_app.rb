require 'sinatra'


# IF YOU WANT TO TRY THESE EXAMPLES ON YOUR OWN SINATRA INSTALLATION
# go to "edit" in the komodo menu
# go to "replace"
# replace all ~lah432 with ~yourNetID
# copy and paste the code in your app.rb file


get '/' do #this means run the code below when at the root route ~netID/sinatra/example_sinatra_app/
  
  <<-HTML #sinatra treats this entire HTML block as a single line, so it will return all of it at once
  <p><a href = "http://itp.nyu.edu/~lah432/sinatra/example_sinatra_app/name">Name Form</a></p>
  This "app" asks for your name, asks for a color, and prints your name in that color.</br>
  It is made of two routes: </br>
  A route with a form where it asks for your name defined at '/name'</br>
  A route that gets the information from the form and displays your name at '/processName' </br>
  </br>
  
  <p><a href = "http://itp.nyu.edu/~lah432/sinatra/example_sinatra_app/groceries">Groceries Form</a></p>
  This groceries "app" is made up of three routes.</br>
  The first route, '/groceries', is a form that receives input from the user.</br>
  The second route, '/processGroceries', takes that input and does some math on it. Then it generates another URL (sinatra route) with the total for the user to click on.</br>
  The last route, '/budget/:fruitCosts', takes whatever the second route has put in the link after '/budget' and compares it to 15. </br>
  </br>
  
  <p>The app.rb code for these examples is located on the course site <a href ="http://liesjehodgson.com/commlabweb/resources">Resources Page</a>.
  If you want to use it, copy and paste it to your app.rb file, but make sure that you change my net ID (~lah432) to your net ID in all the links and routes.</p>
  HTML

end



#--/name------------------THE FIRST PART OF THE NAME APP --------------------------------------------------------#
# this writes out a basic form to get information from the user. the form's "action" determines where the info --#
# gets sent when the user hits "submit"                                                                          #
#---------------------------------------------------------------------------------------------------------------#

get '/name' do
  <<-HTML
  <form action = "http://itp.nyu.edu/~lah432/sinatra/example_sinatra_app/processName" method= "GET">
  <p> <label>first name:</label> <input type="text" name="firstname"/></p>
  <p> <label>last name:</label> <input type="text" name="lastname"/></p>
  <p> <label>color:</label> <input type="text" name="color"/></p>
  <p> <input type="submit" value = "show me"/>
  HTML
end

#--/processName------------------THE SECOND PART OF THE NAME APP -----------------------------------------------#
# this takes paramaters from the URL generated by the first part of the appt.                                   #
# It prints out the "firstName" and "lastName" paramaters in the color defined by the "color"  paramater        #

# notice that when you want to output a string variable from INSIDE a string (inside quotes), you use #{variable}
# for example: "i am inside quotes and i am a #{variableName}"
# but when you want to output a string variable OUTSIDE a string (outside quotes), you just use the variable name.
# for example: "i am a " + variableName + " but i am outside quotes"
#---------------------------------------------------------------------------------------------------------------#

get '/processName' do
  html = "<h1 style='color:" + params[:color] + "'>Hello #{params[:firstname]} #{params[:lastname]}</h1>"

end








#--/groceries------------------THE FIRST PART OF THE GROCERIES APP ----------------------------------------------#
# this writes out a basic form to get information from the user. the form's "action" determines where the info --#
# gets sent when the user hits "submit"                                                                          #
#---------------------------------------------------------------------------------------------------------------#

get '/groceries' do #this means run the code below when the route is ~netID/sinatra/example_sinatra_app/groceries
  
  #create an empty string that we will fill with HTML
  form = "" 
  
  # start the form, add an "action" URL to tell the form where to send the information on submit.
  # and add a method to dictate how it is formatted. here, we're using "GET"
  form += '<form action="http://itp.nyu.edu/~lah432/sinatra/example_sinatra_app/processGroceries" method="GET">' 
  
  #now ADD more HTML to the form. here we're adding form fields.
  #Note the "name" of each field! Thats how the user input will be identified when it is passed as a paramer to sinatra.
  form += '<p><label>bananas:</label> <input type="text" name="bananas" /></p>'
  form += '<p><label>apples:</label> <input type="text" name="apples" /></p>'
  form += '<p><label>pineapples:</label> <input type="text" name="pineapples" /></p>'
  
  # Now add an input of type "submit" to make a button to send the form
  form += '<p><input type="submit" value="calculate" /></p>'
  
  #end the form
  form += '</form>'
  
  # The last line always gets returned. Here, saying "form" prints out the contents of form -- all that HTML.
  form
end



#--/processGroceries-----THE SECOND PART OF THE GROCERIES APP: ----------------------------------------------------#
# this takes input from a form, converts strings to integers, and adds them up.                                    #
# then it displays the total to the user, and creates a URL link using the total.                                  #
# adding the total to the url link "sends" the total to another sinatra route                                      #
#------------------------------------------------------------------------------------------------------------------#

get '/processGroceries' do
  # because we wrote the form, we know that things named bananas, apples, and pineapples will be arriving.
  # we can then access them from the paramaters hashmap using params[:keyname]
  
  output = "" #create an empty string for output that we will add to later
  
  bananasTotal = Integer(params[:bananas]) * 3 #bananas cost $3. we need to convert the text that comes in to an integer to do math.
  output+= "<p>Your bananas cost #{bananasTotal}</p>" #use the #{variablename} to print the value of a variable within a string
  
  applesTotal = Integer(params[:apples]) * 2 #apples are $2
  output+= "<p>Your apples cost " + String(applesTotal) + "</p>" #you can also use String() to turn the integer back into a string
  
  pineapplesTotal = Integer(params[:pineapples]) * 7 #pineapples are $7
  output+= "<p>Your pineapples cost #{pineapplesTotal}</p>"
  
  total = bananasTotal + applesTotal + pineapplesTotal
  output += "<p><strong>Your total is #{total}</strong></p>"
  
  #in this next line, i am passing the total as a URL parameter to the route /budget
  output += "<a href='http://itp.nyu.edu/~lah432/sinatra/example_sinatra_app/budget/" + String(total) + "'> Am I under budget? </a>"

end




#-/budget/:fruitCost---------THE LAST PART OF THE GROCERIES APP -------------------------------------------------#
# this takes whatever comes after /budget/ as a paramater, converts it to an int, and compares it to a number    #
# note that only /budget/:fruitCost is defined. if the user tries to go to /budget, they'll get an error because #
# we haven't told sinatra how to handle that route                                                               #
#----------------------------------------------------------------------------------------------------------------#
get '/budget/:fruitCost' do #this defines whatever comes after /budget/ in a URL to be a paramater that I am calling "fruitCost"
  
  fruitInteger = Integer(params[:fruitCost]) #remember to turn the string that comes through the URL into an integer!
  
  output = "" #an empty string for output
  output += "<h3>your budget is $15</h3>"
  output += "<h3>your total is $#{fruitInteger}</h3>"
  
  #in Sinatra and Ruby, "else if" is condensed into "elsif". Remember to "end" your if statements.
  if (fruitInteger < 15) 
    output += "<p>hooray! you are underbudget<p>"
  elsif (fruitInteger > 15)
    output += "<p style='color: red'> uh oh. better buy less.</p>"
  else
    output += "<p> your total is the same as your budget. not a dollar to spare! </p>"
  end
  
  #now, before I return the output string, I'll add a link to the original form to let people try again. 
  output += "<a href = 'http://itp.nyu.edu/~lah432/sinatra/example_sinatra_app/groceries'> try again </a>"
end




